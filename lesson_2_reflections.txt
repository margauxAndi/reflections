Q: What happens when you initialize a repository? Why do you need to do it?

A: A git file will be created when you initialize a repository.  This is needed so that Git can track the files within that directory.


Q: How is the staging area different from the working directory and the repository? What value do you think it offers?

A: The staging area holds the files that you may be ready to commit.  The working directory on the other hand, holds the files that you may still be working on.  And the repository contains the files that have had significant changes or modification.


Q: How can you use the staging area to make sure you have one commit per logical change?

A: The staging area can be used to separate the changes you are ready to commit and the codes you are still working on.


Q: What are some situations when branches would be helpful in keeping your history organized? How would branches help?

A: Branches will be helpful for trying some experimental codes.  It will also help when developers need to work on different aspect of the project.


Q: How do the diagrams help you visualize the branch structure?

A: The diagrams help in understanding how each commit relates to the other commits and how each branch connects to other commits as well.


Q: What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

A: Merging two branches together have included all the changes and added features in one branch.  The diagram provided a good visual to understand the connection of each branch and commits to each other.

Q: What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

A: The pros of Git's automatic merging is the efficiency in which Gits identifies the codes to add and delete and provide a final result.  However, automatic merging may merge codes that may be ambiguous to the developers later on.  Doing manual merges on the other hand is a bit tedious but provides code review before having the final code.